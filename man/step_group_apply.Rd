% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/group_apply.R
\name{step_group_apply}
\alias{step_group_apply}
\title{Applies a recipe for each group}
\usage{
step_group_apply(
  recipe,
  groups,
  grouped_recipe,
  trained_recipes = NA,
  role = NA,
  trained = FALSE,
  skip = FALSE,
  id = recipes::rand_id("group_apply")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{groups}{variables or computations to group by
when preparing the recipe.}

\item{grouped_recipe}{a recipe specification to apply
for each group.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake.recipe]{bake.recipe()}}? While all operations are baked
when \code{\link[=prep.recipe]{prep.recipe()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations}

\item{id}{A character string that is unique to this step to identify it.}
}
\description{
Applies a recipe for each group specified in the \code{groups}
parameter.
}
\note{
It's better to use this step as the first step of
your pipeline, or before creating any new variables as
it might be harder to correctly specify the grouped recipe
otherwise.
}
\examples{
df <- tibble::tibble(
  g = sample(letters[1:3], size = 100, replace = TRUE),
  x = runif(100),
  y = rnorm(100)
)

grouped_rec <- recipes::recipe(y ~ ., data = df) \%>\%
  recipes::step_center(x, y)

rec <- recipes::recipe(y ~ ., df) \%>\%
  step_group_apply(g, grouped_rec)

rec <- recipes::prep(rec, df)

out <- bake(rec, df)

}
